


9. Which classes are aggregates of other classes?

Track is the aggregate of CompactDisc.

10. If the passing object is not an instance of Media, what happens?

It'll raise an error if the passing object is not a descendant of Media (including Media).

11. 
- What class should implement the Comparable interface?

class Media

- In those classes, how should you implement the compareTo() method be to reflect the ordering that we want?

if we want to order medias by title then cost:

public int compareTo(Media o1, Media o2) {
        int byCost = (int) (o1.getCost() - o2.getCost());
        int byTitle = o1.getTitle().compareTo(o2.getTitle());
        return (byTitle == 0) ? byCost : byTitle;
}

if we want to order medias by cost then title, simply do the similar except for the return statement: return (byCost == 0) ? byTitle : byCost;

- Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this Comparable interface approach?

Basically, we can't because Comparable does not explicitly support.

- Suppose the DVDs has a different ordering rule from the other media types, that is by title, then decreasing length, then cost. How would you modify your code to allow this?

Create Disc, Book implement Comparable. Apply method overloading approach to handle comparison between DVD, CD, Book.






